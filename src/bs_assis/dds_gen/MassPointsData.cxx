// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MassPointsData.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "MassPointsData.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define MassPointsData_max_cdr_typesize 3208ULL;
#define MassPointData_max_cdr_typesize 32ULL;
#define MassPointsData_max_key_cdr_typesize 0ULL;
#define MassPointData_max_key_cdr_typesize 0ULL;

MassPointsData::MassPointsData()
{
    // short m_system_ID
    m_system_ID = 0;
    // sequence<MassPointData> m_points


}

MassPointsData::~MassPointsData()
{


}

MassPointsData::MassPointsData(
        const MassPointsData& x)
{
    m_system_ID = x.m_system_ID;
    m_points = x.m_points;
}

MassPointsData::MassPointsData(
        MassPointsData&& x) noexcept 
{
    m_system_ID = x.m_system_ID;
    m_points = std::move(x.m_points);
}

MassPointsData& MassPointsData::operator =(
        const MassPointsData& x)
{

    m_system_ID = x.m_system_ID;
    m_points = x.m_points;

    return *this;
}

MassPointsData& MassPointsData::operator =(
        MassPointsData&& x) noexcept
{

    m_system_ID = x.m_system_ID;
    m_points = std::move(x.m_points);

    return *this;
}

bool MassPointsData::operator ==(
        const MassPointsData& x) const
{

    return (m_system_ID == x.m_system_ID && m_points == x.m_points);
}

bool MassPointsData::operator !=(
        const MassPointsData& x) const
{
    return !(*this == x);
}

size_t MassPointsData::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MassPointsData_max_cdr_typesize;
}

size_t MassPointsData::getCdrSerializedSize(
        const MassPointsData& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.points().size(); ++a)
    {
        current_alignment += MassPointData::getCdrSerializedSize(data.points().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void MassPointsData::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_system_ID;
    scdr << m_points;

}

void MassPointsData::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_system_ID;
    dcdr >> m_points;
}

/*!
 * @brief This function sets a value in member system_ID
 * @param _system_ID New value for member system_ID
 */
void MassPointsData::system_ID(
        int16_t _system_ID)
{
    m_system_ID = _system_ID;
}

/*!
 * @brief This function returns the value of member system_ID
 * @return Value of member system_ID
 */
int16_t MassPointsData::system_ID() const
{
    return m_system_ID;
}

/*!
 * @brief This function returns a reference to member system_ID
 * @return Reference to member system_ID
 */
int16_t& MassPointsData::system_ID()
{
    return m_system_ID;
}

/*!
 * @brief This function copies the value in member points
 * @param _points New value to be copied in member points
 */
void MassPointsData::points(
        const std::vector<MassPointData>& _points)
{
    m_points = _points;
}

/*!
 * @brief This function moves the value in member points
 * @param _points New value to be moved in member points
 */
void MassPointsData::points(
        std::vector<MassPointData>&& _points)
{
    m_points = std::move(_points);
}

/*!
 * @brief This function returns a constant reference to member points
 * @return Constant reference to member points
 */
const std::vector<MassPointData>& MassPointsData::points() const
{
    return m_points;
}

/*!
 * @brief This function returns a reference to member points
 * @return Reference to member points
 */
std::vector<MassPointData>& MassPointsData::points()
{
    return m_points;
}


size_t MassPointsData::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MassPointsData_max_key_cdr_typesize;
}

bool MassPointsData::isKeyDefined()
{
    return false;
}

void MassPointsData::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

