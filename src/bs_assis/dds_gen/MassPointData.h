// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MassPointData.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_MASSPOINTDATA_H_
#define _FAST_DDS_GENERATED_MASSPOINTDATA_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(MASSPOINTDATA_SOURCE)
#define MASSPOINTDATA_DllAPI __declspec( dllexport )
#else
#define MASSPOINTDATA_DllAPI __declspec( dllimport )
#endif // MASSPOINTDATA_SOURCE
#else
#define MASSPOINTDATA_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define MASSPOINTDATA_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure MassPointData defined by the user in the IDL file.
 * @ingroup MassPointData
 */
class MassPointData
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MassPointData();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MassPointData();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MassPointData that will be copied.
     */
    eProsima_user_DllExport MassPointData(
            const MassPointData& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MassPointData that will be copied.
     */
    eProsima_user_DllExport MassPointData(
            MassPointData&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MassPointData that will be copied.
     */
    eProsima_user_DllExport MassPointData& operator =(
            const MassPointData& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MassPointData that will be copied.
     */
    eProsima_user_DllExport MassPointData& operator =(
            MassPointData&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x MassPointData object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MassPointData& x) const;

    /*!
     * @brief Comparison operator.
     * @param x MassPointData object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MassPointData& x) const;

    /*!
     * @brief This function sets a value in member pos_x
     * @param _pos_x New value for member pos_x
     */
    eProsima_user_DllExport void pos_x(
            float _pos_x);

    /*!
     * @brief This function returns the value of member pos_x
     * @return Value of member pos_x
     */
    eProsima_user_DllExport float pos_x() const;

    /*!
     * @brief This function returns a reference to member pos_x
     * @return Reference to member pos_x
     */
    eProsima_user_DllExport float& pos_x();

    /*!
     * @brief This function sets a value in member pos_y
     * @param _pos_y New value for member pos_y
     */
    eProsima_user_DllExport void pos_y(
            float _pos_y);

    /*!
     * @brief This function returns the value of member pos_y
     * @return Value of member pos_y
     */
    eProsima_user_DllExport float pos_y() const;

    /*!
     * @brief This function returns a reference to member pos_y
     * @return Reference to member pos_y
     */
    eProsima_user_DllExport float& pos_y();

    /*!
     * @brief This function sets a value in member pos_z
     * @param _pos_z New value for member pos_z
     */
    eProsima_user_DllExport void pos_z(
            float _pos_z);

    /*!
     * @brief This function returns the value of member pos_z
     * @return Value of member pos_z
     */
    eProsima_user_DllExport float pos_z() const;

    /*!
     * @brief This function returns a reference to member pos_z
     * @return Reference to member pos_z
     */
    eProsima_user_DllExport float& pos_z();

    /*!
     * @brief This function sets a value in member vel_x
     * @param _vel_x New value for member vel_x
     */
    eProsima_user_DllExport void vel_x(
            float _vel_x);

    /*!
     * @brief This function returns the value of member vel_x
     * @return Value of member vel_x
     */
    eProsima_user_DllExport float vel_x() const;

    /*!
     * @brief This function returns a reference to member vel_x
     * @return Reference to member vel_x
     */
    eProsima_user_DllExport float& vel_x();

    /*!
     * @brief This function sets a value in member vel_y
     * @param _vel_y New value for member vel_y
     */
    eProsima_user_DllExport void vel_y(
            float _vel_y);

    /*!
     * @brief This function returns the value of member vel_y
     * @return Value of member vel_y
     */
    eProsima_user_DllExport float vel_y() const;

    /*!
     * @brief This function returns a reference to member vel_y
     * @return Reference to member vel_y
     */
    eProsima_user_DllExport float& vel_y();

    /*!
     * @brief This function sets a value in member vel_z
     * @param _vel_z New value for member vel_z
     */
    eProsima_user_DllExport void vel_z(
            float _vel_z);

    /*!
     * @brief This function returns the value of member vel_z
     * @return Value of member vel_z
     */
    eProsima_user_DllExport float vel_z() const;

    /*!
     * @brief This function returns a reference to member vel_z
     * @return Reference to member vel_z
     */
    eProsima_user_DllExport float& vel_z();

    /*!
     * @brief This function sets a value in member volume
     * @param _volume New value for member volume
     */
    eProsima_user_DllExport void volume(
            int64_t _volume);

    /*!
     * @brief This function returns the value of member volume
     * @return Value of member volume
     */
    eProsima_user_DllExport int64_t volume() const;

    /*!
     * @brief This function returns a reference to member volume
     * @return Reference to member volume
     */
    eProsima_user_DllExport int64_t& volume();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const MassPointData& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    float m_pos_x;
    float m_pos_y;
    float m_pos_z;
    float m_vel_x;
    float m_vel_y;
    float m_vel_z;
    int64_t m_volume;

};

#endif // _FAST_DDS_GENERATED_MASSPOINTDATA_H_

