// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MassPointData.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "MassPointData.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define MassPointData_max_cdr_typesize 32ULL;
#define MassPointData_max_key_cdr_typesize 0ULL;

MassPointData::MassPointData()
{
    // float m_pos_x
    m_pos_x = 0.0;
    // float m_pos_y
    m_pos_y = 0.0;
    // float m_pos_z
    m_pos_z = 0.0;
    // float m_vel_x
    m_vel_x = 0.0;
    // float m_vel_y
    m_vel_y = 0.0;
    // float m_vel_z
    m_vel_z = 0.0;
    // long long m_volume
    m_volume = 0;

}

MassPointData::~MassPointData()
{







}

MassPointData::MassPointData(
        const MassPointData& x)
{
    m_pos_x = x.m_pos_x;
    m_pos_y = x.m_pos_y;
    m_pos_z = x.m_pos_z;
    m_vel_x = x.m_vel_x;
    m_vel_y = x.m_vel_y;
    m_vel_z = x.m_vel_z;
    m_volume = x.m_volume;
}

MassPointData::MassPointData(
        MassPointData&& x) noexcept 
{
    m_pos_x = x.m_pos_x;
    m_pos_y = x.m_pos_y;
    m_pos_z = x.m_pos_z;
    m_vel_x = x.m_vel_x;
    m_vel_y = x.m_vel_y;
    m_vel_z = x.m_vel_z;
    m_volume = x.m_volume;
}

MassPointData& MassPointData::operator =(
        const MassPointData& x)
{

    m_pos_x = x.m_pos_x;
    m_pos_y = x.m_pos_y;
    m_pos_z = x.m_pos_z;
    m_vel_x = x.m_vel_x;
    m_vel_y = x.m_vel_y;
    m_vel_z = x.m_vel_z;
    m_volume = x.m_volume;

    return *this;
}

MassPointData& MassPointData::operator =(
        MassPointData&& x) noexcept
{

    m_pos_x = x.m_pos_x;
    m_pos_y = x.m_pos_y;
    m_pos_z = x.m_pos_z;
    m_vel_x = x.m_vel_x;
    m_vel_y = x.m_vel_y;
    m_vel_z = x.m_vel_z;
    m_volume = x.m_volume;

    return *this;
}

bool MassPointData::operator ==(
        const MassPointData& x) const
{

    return (m_pos_x == x.m_pos_x && m_pos_y == x.m_pos_y && m_pos_z == x.m_pos_z && m_vel_x == x.m_vel_x && m_vel_y == x.m_vel_y && m_vel_z == x.m_vel_z && m_volume == x.m_volume);
}

bool MassPointData::operator !=(
        const MassPointData& x) const
{
    return !(*this == x);
}

size_t MassPointData::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MassPointData_max_cdr_typesize;
}

size_t MassPointData::getCdrSerializedSize(
        const MassPointData& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

void MassPointData::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_pos_x;
    scdr << m_pos_y;
    scdr << m_pos_z;
    scdr << m_vel_x;
    scdr << m_vel_y;
    scdr << m_vel_z;
    scdr << m_volume;

}

void MassPointData::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_pos_x;
    dcdr >> m_pos_y;
    dcdr >> m_pos_z;
    dcdr >> m_vel_x;
    dcdr >> m_vel_y;
    dcdr >> m_vel_z;
    dcdr >> m_volume;
}

/*!
 * @brief This function sets a value in member pos_x
 * @param _pos_x New value for member pos_x
 */
void MassPointData::pos_x(
        float _pos_x)
{
    m_pos_x = _pos_x;
}

/*!
 * @brief This function returns the value of member pos_x
 * @return Value of member pos_x
 */
float MassPointData::pos_x() const
{
    return m_pos_x;
}

/*!
 * @brief This function returns a reference to member pos_x
 * @return Reference to member pos_x
 */
float& MassPointData::pos_x()
{
    return m_pos_x;
}

/*!
 * @brief This function sets a value in member pos_y
 * @param _pos_y New value for member pos_y
 */
void MassPointData::pos_y(
        float _pos_y)
{
    m_pos_y = _pos_y;
}

/*!
 * @brief This function returns the value of member pos_y
 * @return Value of member pos_y
 */
float MassPointData::pos_y() const
{
    return m_pos_y;
}

/*!
 * @brief This function returns a reference to member pos_y
 * @return Reference to member pos_y
 */
float& MassPointData::pos_y()
{
    return m_pos_y;
}

/*!
 * @brief This function sets a value in member pos_z
 * @param _pos_z New value for member pos_z
 */
void MassPointData::pos_z(
        float _pos_z)
{
    m_pos_z = _pos_z;
}

/*!
 * @brief This function returns the value of member pos_z
 * @return Value of member pos_z
 */
float MassPointData::pos_z() const
{
    return m_pos_z;
}

/*!
 * @brief This function returns a reference to member pos_z
 * @return Reference to member pos_z
 */
float& MassPointData::pos_z()
{
    return m_pos_z;
}

/*!
 * @brief This function sets a value in member vel_x
 * @param _vel_x New value for member vel_x
 */
void MassPointData::vel_x(
        float _vel_x)
{
    m_vel_x = _vel_x;
}

/*!
 * @brief This function returns the value of member vel_x
 * @return Value of member vel_x
 */
float MassPointData::vel_x() const
{
    return m_vel_x;
}

/*!
 * @brief This function returns a reference to member vel_x
 * @return Reference to member vel_x
 */
float& MassPointData::vel_x()
{
    return m_vel_x;
}

/*!
 * @brief This function sets a value in member vel_y
 * @param _vel_y New value for member vel_y
 */
void MassPointData::vel_y(
        float _vel_y)
{
    m_vel_y = _vel_y;
}

/*!
 * @brief This function returns the value of member vel_y
 * @return Value of member vel_y
 */
float MassPointData::vel_y() const
{
    return m_vel_y;
}

/*!
 * @brief This function returns a reference to member vel_y
 * @return Reference to member vel_y
 */
float& MassPointData::vel_y()
{
    return m_vel_y;
}

/*!
 * @brief This function sets a value in member vel_z
 * @param _vel_z New value for member vel_z
 */
void MassPointData::vel_z(
        float _vel_z)
{
    m_vel_z = _vel_z;
}

/*!
 * @brief This function returns the value of member vel_z
 * @return Value of member vel_z
 */
float MassPointData::vel_z() const
{
    return m_vel_z;
}

/*!
 * @brief This function returns a reference to member vel_z
 * @return Reference to member vel_z
 */
float& MassPointData::vel_z()
{
    return m_vel_z;
}

/*!
 * @brief This function sets a value in member volume
 * @param _volume New value for member volume
 */
void MassPointData::volume(
        int64_t _volume)
{
    m_volume = _volume;
}

/*!
 * @brief This function returns the value of member volume
 * @return Value of member volume
 */
int64_t MassPointData::volume() const
{
    return m_volume;
}

/*!
 * @brief This function returns a reference to member volume
 * @return Reference to member volume
 */
int64_t& MassPointData::volume()
{
    return m_volume;
}



size_t MassPointData::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MassPointData_max_key_cdr_typesize;
}

bool MassPointData::isKeyDefined()
{
    return false;
}

void MassPointData::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

