// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file BBoxData.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_BBOXDATA_H_
#define _FAST_DDS_GENERATED_BBOXDATA_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(BBOXDATA_SOURCE)
#define BBOXDATA_DllAPI __declspec( dllexport )
#else
#define BBOXDATA_DllAPI __declspec( dllimport )
#endif // BBOXDATA_SOURCE
#else
#define BBOXDATA_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define BBOXDATA_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure BBoxData defined by the user in the IDL file.
 * @ingroup BBoxData
 */
class BBoxData
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport BBoxData();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~BBoxData();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object BBoxData that will be copied.
     */
    eProsima_user_DllExport BBoxData(
            const BBoxData& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object BBoxData that will be copied.
     */
    eProsima_user_DllExport BBoxData(
            BBoxData&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object BBoxData that will be copied.
     */
    eProsima_user_DllExport BBoxData& operator =(
            const BBoxData& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object BBoxData that will be copied.
     */
    eProsima_user_DllExport BBoxData& operator =(
            BBoxData&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x BBoxData object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const BBoxData& x) const;

    /*!
     * @brief Comparison operator.
     * @param x BBoxData object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const BBoxData& x) const;

    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    eProsima_user_DllExport void id(
            int16_t _id);

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    eProsima_user_DllExport int16_t id() const;

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    eProsima_user_DllExport int16_t& id();

    /*!
     * @brief This function copies the value in member obj_class
     * @param _obj_class New value to be copied in member obj_class
     */
    eProsima_user_DllExport void obj_class(
            const std::string& _obj_class);

    /*!
     * @brief This function moves the value in member obj_class
     * @param _obj_class New value to be moved in member obj_class
     */
    eProsima_user_DllExport void obj_class(
            std::string&& _obj_class);

    /*!
     * @brief This function returns a constant reference to member obj_class
     * @return Constant reference to member obj_class
     */
    eProsima_user_DllExport const std::string& obj_class() const;

    /*!
     * @brief This function returns a reference to member obj_class
     * @return Reference to member obj_class
     */
    eProsima_user_DllExport std::string& obj_class();
    /*!
     * @brief This function sets a value in member xmin
     * @param _xmin New value for member xmin
     */
    eProsima_user_DllExport void xmin(
            int64_t _xmin);

    /*!
     * @brief This function returns the value of member xmin
     * @return Value of member xmin
     */
    eProsima_user_DllExport int64_t xmin() const;

    /*!
     * @brief This function returns a reference to member xmin
     * @return Reference to member xmin
     */
    eProsima_user_DllExport int64_t& xmin();

    /*!
     * @brief This function sets a value in member ymin
     * @param _ymin New value for member ymin
     */
    eProsima_user_DllExport void ymin(
            int64_t _ymin);

    /*!
     * @brief This function returns the value of member ymin
     * @return Value of member ymin
     */
    eProsima_user_DllExport int64_t ymin() const;

    /*!
     * @brief This function returns a reference to member ymin
     * @return Reference to member ymin
     */
    eProsima_user_DllExport int64_t& ymin();

    /*!
     * @brief This function sets a value in member xmax
     * @param _xmax New value for member xmax
     */
    eProsima_user_DllExport void xmax(
            int64_t _xmax);

    /*!
     * @brief This function returns the value of member xmax
     * @return Value of member xmax
     */
    eProsima_user_DllExport int64_t xmax() const;

    /*!
     * @brief This function returns a reference to member xmax
     * @return Reference to member xmax
     */
    eProsima_user_DllExport int64_t& xmax();

    /*!
     * @brief This function sets a value in member ymax
     * @param _ymax New value for member ymax
     */
    eProsima_user_DllExport void ymax(
            int64_t _ymax);

    /*!
     * @brief This function returns the value of member ymax
     * @return Value of member ymax
     */
    eProsima_user_DllExport int64_t ymax() const;

    /*!
     * @brief This function returns a reference to member ymax
     * @return Reference to member ymax
     */
    eProsima_user_DllExport int64_t& ymax();

    /*!
     * @brief This function sets a value in member probability
     * @param _probability New value for member probability
     */
    eProsima_user_DllExport void probability(
            float _probability);

    /*!
     * @brief This function returns the value of member probability
     * @return Value of member probability
     */
    eProsima_user_DllExport float probability() const;

    /*!
     * @brief This function returns a reference to member probability
     * @return Reference to member probability
     */
    eProsima_user_DllExport float& probability();

    /*!
     * @brief This function sets a value in member pose_x
     * @param _pose_x New value for member pose_x
     */
    eProsima_user_DllExport void pose_x(
            float _pose_x);

    /*!
     * @brief This function returns the value of member pose_x
     * @return Value of member pose_x
     */
    eProsima_user_DllExport float pose_x() const;

    /*!
     * @brief This function returns a reference to member pose_x
     * @return Reference to member pose_x
     */
    eProsima_user_DllExport float& pose_x();

    /*!
     * @brief This function sets a value in member pose_y
     * @param _pose_y New value for member pose_y
     */
    eProsima_user_DllExport void pose_y(
            float _pose_y);

    /*!
     * @brief This function returns the value of member pose_y
     * @return Value of member pose_y
     */
    eProsima_user_DllExport float pose_y() const;

    /*!
     * @brief This function returns a reference to member pose_y
     * @return Reference to member pose_y
     */
    eProsima_user_DllExport float& pose_y();

    /*!
     * @brief This function sets a value in member pose_z
     * @param _pose_z New value for member pose_z
     */
    eProsima_user_DllExport void pose_z(
            float _pose_z);

    /*!
     * @brief This function returns the value of member pose_z
     * @return Value of member pose_z
     */
    eProsima_user_DllExport float pose_z() const;

    /*!
     * @brief This function returns a reference to member pose_z
     * @return Reference to member pose_z
     */
    eProsima_user_DllExport float& pose_z();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const BBoxData& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int16_t m_id;
    std::string m_obj_class;
    int64_t m_xmin;
    int64_t m_ymin;
    int64_t m_xmax;
    int64_t m_ymax;
    float m_probability;
    float m_pose_x;
    float m_pose_y;
    float m_pose_z;

};

#endif // _FAST_DDS_GENERATED_BBOXDATA_H_

